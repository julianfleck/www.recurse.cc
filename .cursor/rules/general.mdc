---
description: "Self-bootstrapping meta rule enforcing Recursive Bootstrapping Protocol. Injected on every turn."
globs: ["**/*"]
alwaysApply: true
lastVerified: 2025-10-28T02:55:29Z
sources:
  - name: "Recursive Bootstrapping Protocol Template"
    url: "Internal bootstrap template"
    accessedAt: 2025-10-28T02:55:29Z
  - name: "Recurse.cc Project Analysis"
    url: "docs/research/2025-10-28/05-internal-codebase-analysis.md"
    accessedAt: 2025-10-28T02:55:29Z
---

# Meta Rules: Self-Bootstrapping Protocol

## Understanding This Rule

**This rule is injected into your context on every single turn.** Not just once at the start—every interaction. You see these instructions every time you respond. They are persistent guardrails that shape how you approach every task, maintain continuity, and build understanding over time.

You cannot "forget" these instructions. They are always present.

## Expected Directory Structure

```
recurse.cc/ (monorepo root)
├── .cursor/
│   └── rules/
│       ├── general.mdc          # This file - core protocol
│       ├── overview.mdc           # MANDATORY: Project structure ledger (always applied)
│       ├── typescript.mdc       # TypeScript conventions
│       ├── next.mdc             # Next.js patterns
│       ├── routing.mdc          # App Router specifics
│       ├── fumadocs.mdc         # Fumadocs framework
│       ├── ultracite.mdc        # Biome linting
│       └── monorepo.mdc         # Monorepo patterns
├── apps/
│   ├── www/                     # Marketing website (www.recurse.cc)
│   ├── docs/                    # Documentation (docs.recurse.cc)
│   └── dashboard/               # Dashboard app (dashboard.recurse.cc)
├── packages/
│   ├── ui/                      # Shared UI components
│   ├── auth/                    # Authentication logic
│   ├── api/                     # API client
│   ├── fumadocs/                # Fumadocs shared config
│   └── config/                  # Shared configurations
├── docs/
│   ├── research/                # Externalized memory - research findings
│   │   └── YYYY-MM-DD/
│   │       └── NN-topic.md
│   ├── context/                 # Externalized understanding - context maps
│   │   └── project-understanding.md
│   ├── tasks/                   # Externalized intention - workflow
│   │   ├── planned/
│   │   ├── active/
│   │   └── completed/
│   └── planning/                # Project documentation
└── CHANGELOG.md                 # Externalized evolution - audit trail
```

## Prime Directive

- **Research first or it didn't happen.** No claims or rule drafts without research (external + internal) and sources.
- All rules must be **`.mdc` with frontmatter** and live in `.cursor/rules/`.
- **CRITICAL: ALWAYS keep `.cursor/rules/overview.mdc` in sync** - This file is exposed on every turn via `alwaysApply: true` and must accurately reflect project structure. Any file creation, deletion, or purpose change REQUIRES an immediate update to `overview.mdc`.
- All substantial actions must update the **ledger** (`.cursor/rules/overview.mdc`) and the **audit trail** (`CHANGELOG.md`).
- **Diverge before converging.** Explore broadly, surface contradictions, keep tension high—then synthesize and decide.

## Mandatory Rule File: overview.mdc

**`.cursor/rules/overview.mdc` is a mandatory rule file that must be kept in sync with the project structure.**

### Status
- **Location:** `.cursor/rules/overview.mdc`
- **Exposure:** Included in agent context on every turn (via alwaysApply)
- **Purpose:** Single source of truth for project structure, inventory, and conventions
- **Format:** MDC file with YAML content structure preserved
- **Update Requirement:** Must be updated whenever files are created, deleted, or their purpose changes

### Mandatory Update Triggers

You MUST update `.cursor/rules/overview.mdc` when:
- Creating new files or directories (add to `inventory`)
- Deleting files or directories (mark as `deprecated` or remove from `inventory`)
- Changing file purpose or status (update `purpose` or `status` fields)
- Adding new rules or documentation (add entries with appropriate `kind`)
- Completing migration phases (update `status` fields)

### Schema Compliance

The `overview.mdc` contains YAML content following a strict schema (see Schema section below). Maintain:
- **project:** Basic project metadata
- **inventory:** Complete list of all significant files/directories
- **conventions:** Technology stack and standards

### Hard Stop Rule

**If `.cursor/rules/overview.mdc` is out of sync with the filesystem, halt and reconcile before proceeding.** This file is the entry point for progressive context building and must accurately reflect the project state.

## The Extract-Expand-Map-Evaluate-Compress-Recurse Methodology

Every task follows this recursive cycle:

### 1. Extract/Expand (External Research)

**Gather knowledge from outside sources:**

- Run `date -u +"%Y-%m-%dT%H:%M:%SZ"` to capture timestamp
- Perform web searches: official docs, standards, reputable organizations
- Include **cursor.directory** for Cursor-specific rule patterns
- Focus on **recency:** prefer sources from last 12-18 months
- Document **every source:** title, URL, access timestamp
- Triangulate important claims: cite ≥2 independent sources when feasible

**If project goals are unclear:** ASK THE USER. Don't guess.

### 2. Map (Internal Research)

**Correlate external findings with existing project knowledge:**

- Use **semantic search** to understand themes across existing notes/docs
- For code: use **`ast-grep`** for structural analysis (better than regex)
- For PDFs: use **`rga`** (ripgrep-all) to search inside documents
- For exact text: use **`grep`** or **`rg`** (ripgrep)
- Search through existing `docs/research/` notes for related work
- Check `docs/context/` for previous understanding
- Review `docs/tasks/` for related planned or completed work
- Identify: gaps, contradictions, patterns, what's already known vs. what's new

**The distinction matters:**
- External research (Extract/Expand) brings in new knowledge from the world
- Internal research (Map) understands what this project already knows
- Both are required before making decisions

### 3. Evaluate

**Quality gate before proceeding:**

- Do we have enough context? Unresolved contradictions?
- What's still unclear or uncertain?
- **Hard stop:** No sources → no claim. Mark unsourced as `TODO:[needs source]`
- Confidence < 0.7? Propose verification action

### 4. Compress (Document)

**Synthesize findings into structured artifacts:**

- Save research to `docs/research/YYYY-MM-DD/[index]-[task].md` with:
  - `## Timestamp`
  - `## Context` (what are we researching and why?)
  - `## Queries` (search terms used)
  - `## Sources` (with access times and key findings)
  - `## Extracted Practices` (from external research)
  - `## Internal Mapping` (what project already knows)
  - `## Synthesis` (integrated understanding)
  - `## Open Questions`

- Create or update rules based on learned practices
- Update `.cursor/rules/overview.mdc` with new/changed files (MANDATORY)
- Append timestamped entry to `CHANGELOG.md`

### 5. Recurse

**Feed learning back into the system:**

- Each completed task triggers re-evaluation
- Rules evolve as project understanding deepens
- New gaps trigger new research cycles
- System improves itself over time

This is **not linear**—it's recursive. Because you see the rules you create on every turn, you can continuously apply this methodology. Every new task triggers the cycle again, ensuring new information lands in the right place and the knowledge base stays current.

## Progressive Context Building (Critical Pattern)

**Don't dump everything at once.** Build understanding iteratively in layers. This is a process you run WITH the user to teach yourself about the project.

### Iteration 1: Orient (Give Overview → Summarize)

**When user points to `.cursor/rules/overview.mdc` or high-level docs:**

1. Read the overview/map file (`.cursor/rules/overview.mdc`)
2. Use semantic search to understand boundaries
3. Create initial mental model of project structure
4. Return summary: "Here's what I understand about this project..."
5. Don't ask for specific work yet—just orient

**Save this understanding as a context map** (e.g., `docs/context/project-understanding.md`) and link it in `.cursor/rules/overview.mdc`.

### Iteration 2: Map (Assemble Deeper Context → Identify Patterns)

**When user asks to explore deeper:**

1. Search through docs/research/ notes, docs/context/ maps, codebase using semantic search / grep / ast-grep
2. You now have orientation from Iteration 1—make better decisions about what to read
3. Map relationships between components
4. Identify themes, patterns, contradictions
5. Return structured understanding: "Here are the key patterns / relationships I see..."

**Update or create new context map** in `docs/context/` with this deeper understanding.

### Iteration 3: Focus (Detailed Docs → Specific Work)

**When user points to specific files or asks for targeted work:**

1. You now have orientation + structure from previous iterations
2. Read detailed docs with full context
3. Produce nuanced, contextually appropriate work
4. You know where outputs fit in the larger picture

**Continue updating context maps** as understanding evolves.

### Why This Works

Each iteration stabilizes context before building on it. You're not guessing at relevance—you have reference points from previous passes.

**This is why `.cursor/rules/overview.mdc` matters:** it's the entry point for Iteration 1 and is always available.  
**This is why `docs/research/` matters:** research trails help Iteration 2.  
**This is why `docs/context/` matters:** context maps preserve understanding across sessions.  
**This is why `docs/tasks/` matters:** workflow tracking connects planning to execution.  
**This is why file system structure matters:** it guides all iterations.

### Context Maps

Throughout progressive context building, create and maintain context maps:

- **What they are:** Intermediate documents that capture your current understanding
- **Where they live:** `docs/context/` folder
- **What they contain:** Summaries, relationship diagrams (text), key themes, open questions
- **How they're used:** Referenced in later iterations
- **Why they matter:** They externalize understanding so you (and future agents) can build on stable foundations

**Always link context maps in `.cursor/rules/overview.mdc`** so they're discoverable.

## The Execution Protocol (after bootstrap)

Every task follows these steps. **Remember: diverge before you converge.**

### Step 1: Extract/Expand (External Research)

- Capture timestamp: `date -u +"%Y-%m-%dT%H:%M:%SZ"`
- Identify what needs external research
- Perform web searches with scoping questions if needed
- Document sources with timestamps
- **No sources → no claim**

### Step 2: Map (Internal Research)

- Search through existing `docs/research/` notes
- Check `docs/context/` for previous understanding
- Review `docs/tasks/` for related work
- Use semantic search / grep / ast-grep / rga as appropriate
- Correlate external findings with internal knowledge
- Identify gaps and contradictions

### Step 3: Evaluate

- Sufficient context to proceed?
- Quality gate passed?
- Document uncertainties
- **Check: Does new information contradict or improve existing rules?**
- If yes → Flag for Step 5 (rule update proposal)

### Step 4: Work on Request

- Confirm: output format, audience, success criteria
- Take **smallest useful step** first
- Prefer small, incremental changes
- **Before finishing:** Check if any files were created/deleted/changed purpose → Update `.cursor/rules/overview.mdc` immediately

### Step 5: Check if Rules Need Updating

**Proactively monitor for rule update triggers:**

1. **User explicitly requests change:**
   - "We need to change citation format" → Propose update
   - "Add testing requirements" → Propose update
   - User approves → Implement with sources and reasoning

2. **New information merits update:**
   - Research reveals better practices → Propose rule enhancement
   - `lastVerified` date >3 months old → Suggest re-research
   - Discovered contradiction with existing rule → Propose resolution
   - Agent observes need → User decides

3. **Project goals shift:**
   - Pause work, assess impact on existing rules
   - Research new requirements (Extract/Expand → Map → Evaluate)
   - Update or create rules, log the pivot

**Pattern: Agent proposes → User approves → Agent implements**

Always document: what changed, why it changed, sources for new practices.

### Step 6: Compress (Document)

**Always update:**

- **Research notes:** `docs/research/YYYY-MM-DD/[index]-[task].md` with full cycle documented
- **Context maps:** `docs/context/` if understanding evolved
- **Task tracking:** `docs/tasks/active/` for current work, move to `docs/tasks/completed/` when done
- **Rules:** If created or updated, with `lastVerified` timestamp and sources
- **Changelog:** `CHANGELOG.md` with ≤6 line entry, timestamp, files touched
- **Overview:** `.cursor/rules/overview.mdc` if files were created/deleted/changed purpose (MANDATORY - NO EXCEPTIONS)

**CRITICAL REMINDER:** `.cursor/rules/overview.mdc` is exposed in agent context on EVERY turn via `alwaysApply: true`. It is the single source of truth for project structure. Failure to keep it in sync degrades the agent's ability to understand the codebase.

**Hard stop:** If `.cursor/rules/overview.mdc` is out of sync with filesystem, halt and reconcile before proceeding.

### Step 7: Recurse

- Task complete triggers re-evaluation
- Check if new gaps emerged
- **Observe friction and propose rule updates proactively**
- Re-run Step 5 if user feedback or new information suggests rules need updating
- Feed learning back into system for next cycle

## Tool Selection & Search Strategy

**Distinguish external vs. internal research:**

### External Research (Extract/Expand)
- Web search for current best practices
- cursor.directory for Cursor-specific patterns
- Official documentation, standards, reputable sources

### Internal Research (Map)

**For exact text/code patterns:**
- Use `grep` or `rg` (ripgrep) for fast exact matches
- Use `rga` (ripgrep-all) for PDFs or Office documents

**For code structure:**
- Use `ast-grep` for precise structural queries (better than regex)

**For research/writing:**
- Favor **semantic search** across markdown/text to understand themes
- Use `rga` to search inside PDFs when dealing with research papers
- Combine semantic understanding with exact grep for verification

**For mixed projects:**
- Start with semantic search for landscape understanding
- Use `ast-grep` for code structure
- Use `rga` for document search
- Combine approaches as needed

## Safety & Integrity

- Never fabricate sources or data
- Unverifiable → `TODO:[needs source]` + verification path
- Destructive ops (delete/migrate/build/deploy) require explicit confirmation **in this thread** plus one-line rollback plan
- Document uncertainty clearly

## Rule Evolution

Each rule should end with **"Proposed Changes"** section documenting observed friction and suggested tweaks. Human approves/rejects. Log decisions in `CHANGELOG.md`.

Check `lastVerified` dates regularly. If >3 months old, research current practices and update.

## Appendix: Schemas & Templates

### MDC Rule Template

```markdown
---
description: [one-line purpose]
globs: ["[pattern1]", "[pattern2]"]
alwaysApply: false
lastVerified: [YYYY-MM-DDTHH:MM:SSZ]
sources:
  - name: [Source Title]
    url: [URL]
    accessedAt: [YYYY-MM-DDTHH:MM:SSZ]
---

## Purpose

## Scope

## Hard Requirements

## Soft Guidelines

## Quality Checks

## Exceptions

## Proposed Changes
```

### `.cursor/rules/overview.mdc` Schema

**Location:** `.cursor/rules/overview.mdc`  
**Status:** Mandatory rule file, always applied  
**Format:** MDC file with YAML content structure  
**Update Frequency:** Whenever project structure changes

```yaml
project:
  name: [string]
  description: [short purpose]
  domain: [software|research|data|ops|mixed]
  owners:
    - name: [string]
      role: [string]
      contact: [email|handle]

inventory:
  - path: [relative/path]
    kind: [rule|code|data|input|research|context|task|document]
    purpose: "[brief description]"
    owner: "[who maintains]"
    status: [current|deprecated|draft]

conventions:
  software:
    language: "[lang]"
    framework: "[framework]"
    testing: "[framework]"
    lint: "[tool]"
  documentation:
    framework: "[framework]"
    format: "[format]"
    style: "[style guide]"
  package_manager: "[pm]"
  workspace_type: "[monorepo|single-repo]"

  last_updated: [YYYY-MM-DDTHH:MM:SSZ]
```

### CHANGELOG.md Format

```markdown
## [YYYY-MM-DDTHH:MM:SSZ] — [Brief title]

**Context:** [Why this change?]

**Changes:**
- [Action with files touched]

**Impact:** [Why this matters]

**Files touched:** [list]
```

Keep ≤6 lines per entry. Link to research logs for details.

### Research Note Template

```markdown
## [Timestamp from date -u +"%Y-%m-%dT%H:%M:%SZ"]

### Context
[What are we researching and why?]

### Queries (External Research - Extract/Expand)
- [Search query 1]
- [Search query 2]

### Sources (External)
1. [Title] - [URL] (accessed: [timestamp])
   - Key findings: [summary]

### Internal Mapping
- Searched `docs/research/` for: [topics]
- Searched `docs/context/` for: [previous understanding]
- Searched `docs/tasks/` for: [related work]
- Used tools: [semantic search / ast-grep / rga / grep]
- Found related work in: [files]
- Gaps identified: [what's missing]
- Contradictions: [conflicts found]

### Evaluation
- Sufficient context? [yes/no/partial]
- Confidence level: [0.0-1.0]
- Open questions: [list]

### Synthesis
[Integrated understanding from external + internal research]

### Proposed Actions
[What should be done based on this research]

### Proposed Changes
[Document friction for future rule improvements]
```

## Why Each File Exists (Cognitive Functions)

Understanding the **purpose** of each directory and file in the bootstrap system:

- **Rules (`.cursor/rules/*.mdc`):** Guardrail LLM responses persistently on every turn
  - **general.mdc:** Project-specific protocol (this file)
  - **typescript.mdc, next.mdc, routing.mdc:** Framework-specific conventions
  - **fumadocs.mdc:** Documentation framework patterns
  - **ultracite.mdc:** Linting and formatting standards
  - **monorepo.mdc:** Monorepo organization patterns

- **Documentation (`docs/`):** All agent-generated documentation (organized, hierarchical, discoverable)
  - **Research (`docs/research/`):** Externalized memory - gathered and synthesized insights with full Extract-Expand-Map-Evaluate cycle
  - **Context maps (`docs/context/`):** Externalized progressive understanding - intermediate models built through iterative context building, referenced across sessions
  - **Task workflow (`docs/tasks/`):** Externalized intention and execution
    - **Planned (`docs/tasks/planned/`):** Tasks not yet started, with context about why/how
    - **Active (`docs/tasks/active/`):** Current working task context
    - **Completed (`docs/tasks/completed/`):** Retroactive documentation of what was done and why
  - **Planning (`docs/planning/`):** Project documentation and migration plans

- **Overview (`.cursor/rules/overview.mdc`):** Externalized structure - current map of project, single source of truth, entry point for progressive context building, mandatory rule file exposed on every turn via `alwaysApply: true`. **MUST be kept in sync with filesystem at all times - any file creation/deletion/purpose change REQUIRES immediate update.**
- **Changelog (`CHANGELOG.md`):** Externalized evolution - timestamped updates including reasoning

**The file system IS the context.** The agent navigates through tools, not memory. Progressive context building creates stable foundations across iterations. The hierarchical structure (`docs/`) groups related information while maintaining clear separation between user input and agent output.

## Project-Specific Context: Recurse.cc

### Core Identity
- **Platform Name:** Recurse (user-facing)
- **Technology Name:** RAGE (Recursive, Agentic Graph Embeddings)
- **Value Proposition:** "Turn your documents into living context for AI systems"

### Technology Stack
- **Frontend:** Next.js 15 with App Router
- **Documentation:** Fumadocs framework
- **Styling:** Tailwind CSS 4
- **Linting:** Ultracite (Biome)
- **Package Manager:** pnpm with workspaces
- **TypeScript:** 5.x with strict mode

### Monorepo Structure
- **apps/www:** Marketing website
- **apps/docs:** Documentation site
- **apps/dashboard:** Dashboard application
- **packages/*:** Shared code and configurations

### Key Principles
- Type safety enforced via TypeScript strict mode
- Accessibility standards via Ultracite rules
- Content portability across AI systems
- User ownership of data
- Multi-agent development environment

## Proposed Changes

[Document friction as it emerges during use. User reviews and approves/rejects.]
